#!/bin/bash

##########################################
#
# author: coron
# usage: used to generate Makefile for an coron project
# date: 2013/11/21
#
##########################################

TAG="makeconfig"

WORK_DIR=$PWD
NEW_MAKEFILE=$WORK_DIR/Makefile

MAKECONFIG_ROOT=$PORT_ROOT/tools/config
DENSITY_CFG=$MAKECONFIG_ROOT/density.cfg
TEMPLATE_MAKEFILE=$MAKECONFIG_ROOT/Makefile.template
VENDOR_MODIFY_JARS_SUGGEST="framework|services|telephony-common|wifi-service|android.policy"
VENDOR_SAVED_APPS_SUGGEST="MtkBt|FMTransmitter|FMRadio|Bluetooth|FmRadio|.*Stk.*|Nfc"

PULL_BOOT_RECOVERY=pull_boot_recovery

GIT_IGNORE_CONFIG=$MAKECONFIG_ROOT/gitignore.template
PRJ_GIT_IGNORE=$WORK_DIR/.gitignore

FROM_OTA=0
OTA_PACKAGE=$WORK_DIR/ota.zip
OUT=$WORK_DIR/out
OUT_OTA_DIR=$OUT/ota
OUT_SYSTEM=$OUT_OTA_DIR/system/
OUT_METAINF=$OUT_OTA_DIR/META-INF

DENSITY=""
RESOLUTION=""
vendor_modify_jars=""
vendor_saved_apps=""

######## Error Exit Num ##########
ERR_USB_NOT_CONNECTED=151
ERR_DEVICE_NOT_ROOTED=152

ERR_MAKEFILE_EXIST=201
ERR_OTA_INCOMPATIBLE=202
ERR_MISSION_FAILED=209

################## adb ######################

# check adb can find a device
function checkAdbConnect()
{
	echo ">>> 检查连接状态"
	adb shell ls /system > /dev/null 2>&1
	if [ $? != "0" ];then
		echo ">>> 设备未找到，请通过USB线缆连接设备和pc，并在设备上开启Adb调试。"
		exit $ERR_USB_NOT_CONNECTED
	fi
}


# wait for the device to be online or timeout
function waitForDeviceOnline ()
{
	echo ">>> 等待设备在线......"

	local timeout=30
	while [ $timeout -gt 0 ]
	do
		if adb shell ls /system > /dev/null 2>&1; then
			echo ">>> 设备在线"
			break
		fi
		echo ">>> 设备未在线，等待......"
		sleep 3
		timeout=$[$timeout - 3]
	done
	if [ $timeout -eq 0 ];then
		echo ">>> 设备未找到，请确认adb可以找到您的设备然后重新运行该脚本。"
		exit $ERR_USB_NOT_CONNECTED
	fi
}

function checkAdbRoot()
{
	echo ">>> 检查adb root状态"
	SECURE_PROP=$(adb shell getprop ro.secure)
	DEBUG_PROP=$(adb shell getprop ro.debuggable)
	if [ x"$SECURE_PROP" = x"0" -o x"$DEBUG_PROP" = x"1" ];then
		echo ">>> 内核root准备，运行adb root"
		adb root
		waitForDeviceOnline
		return 0
	fi
	return 1
}

function checkSuRoot()
{
	echo "exit" > exit_command
	waitForDeviceOnline
	adb push exit_command /data/local/tmp/
	rm -f exit_command
	if echo "su < /data/local/tmp/exit_command;退出" | adb shell | grep "未找到" > /dev/null 2>&1;then
		return 1
	fi
	return 0
}

# check device connecting state and adb root state
function checkRootState()
{
	checkAdbConnect
	checkAdbRoot
	if [ $? == "0" ];then
		echo ">>> Root状态：内核Root"
		return 0
	fi
	checkSuRoot
	if [ $? == "0" ];then
		echo ">>> Root状态：系统Root"
		return 0
	fi
	echo ">>> 设备不是一台root的手机。"
	exit $ERR_DEVICE_NOT_ROOTED
}

############# set up makefile ################

function checkEnvironment()
{
	if [ -f $NEW_MAKEFILE ];then
		echo ">>> $NEW_MAKEFILE已存在！"
		exit $ERR_MAKEFILE_EXIST
	fi

	if [ ! -f $TEMPLATE_MAKEFILE ];then
		echo ">>> $TEMPLATE_MAKEFILE不存在！"
		echo ">>> 确认您已于先前执行了source ./build/envsetup！"
		exit $ERR_MISSION_FAILED
	fi

	adb shell ls / > /dev/null 2>&1
	if [ $? != 0 -a -f $OTA_PACKAGE ];then
		echo ">>> 设备未在线，但ota.zip已存在。"
		echo ">>> 从$OTA_PACKAGE配置Makefile。"
		FROM_OTA=1
	fi
}

function checkOTAPackage()
{
	echo ">>> 解包$OTA_PACKAGE ......"
	mkdir -p $OUT
	rm -rf $OUT_OTA_DIR
	unzip -q $OTA_PACKAGE -d $OUT_OTA_DIR
	if [ ! -e $OUT_SYSTEM -o ! -e $OUT_METAINF ];then
		echo ">>> 无法找到$OUT_SYSTEM或$OUT_METAINF."
		echo ">>> 检查$OTA_PACKAGE是否为一个ota包。"
		exit $ERR_OTA_INCOMPATIBLE
	fi
	if [ -f $OUT_OTA_DIR/boot.img ];then
		cp $OUT_OTA_DIR/boot.img $WORK_DIR/boot.img
	fi
	if [ -f $OUT_OTA_DIR/recovery.img ];then
		cp $OUT_OTA_DIR/recovery.img $WORK_DIR/recovery.img
	fi
}

function checkMtkPlatform()
{
	if [ $FROM_OTA != 0 ];then
		if [ `cat $OUT_SYSTEM/build.prop | grep "mediatek" | wc -l` -gt 0 ]; then
			MTK_PLATFORM=true
		else
			MTK_PLATFORM=false
		fi
	else
		if [ `adb shell cat /system/build.prop | grep "mediatek" | wc -l` -gt 0 ]; then
			MTK_PLATFORM=true
		else
			MTK_PLATFORM=false
		fi
	fi
	echo ">>> 检查MTK平台：$MTK_PLATFORM"
}

function getResolution()
{
	if [ $FROM_OTA != 0 ];then
		echo ">>> 设置分辨率为默认"
		RESOLUTION="720x1280"
		return 0
	fi
	RESOLUTION=$(adb shell wm size \
		| awk 'BEGIN{FS=": "}{print $NF}' | head -1)
}

function getDensity()
{
	if [ $FROM_OTA != 0 ];then
		echo ">>> 设置像素密度为默认"
		DENSITY="xhdpi"
		return 0
	fi
	lcd_density=$(adb shell getprop \
		| grep "ro.sf.lcd_density" \
		| awk 'BEGIN{FS="["}{print $NF}' \
		| awk 'BEGIN{FS="]"}{print $1}')

	if [ $? == "0" ] && [ "x$lcd_density" != "x" ];then
		density=$(grep "$lcd_density" $DENSITY_CFG | cut -d ':' -f2)
		if [ $? == "0" ] && [ "x$density" != "x" ];then
			DENSITY=$density
		fi
	fi
}

function getVendorModifyJars()
{
	frameworkListFile=$(mktemp -t -u frameworkList.XXXX)

	if [ $FROM_OTA == 0 ];then
		adb shell "if [ -f /data/local/tmp/framework-list ]; then rm /data/local/tmp/framework-list; fi"
		adb shell "ls /system/framework/ > /data/local/tmp/framework-list"
		adb pull /data/local/tmp/framework-list $frameworkListFile > /dev/null 2>&1
	else
		ls $OUT_SYSTEM/framework > $frameworkListFile
	fi
	if [ -e $frameworkListFile ]; then
		vendor_modify_jars=$(grep "\.jar" $frameworkListFile \
			| sed "s/\.jar//g" \
			| egrep $VENDOR_MODIFY_JARS_SUGGEST \
			| sed ":a;N;s/\n/ /g;ba")
		rm $frameworkListFile
	else
		return 1
	fi
}

function getConfigValueFromMakefile()
{
	local makefile=$1
	local prop=$2
	local result_line_count
	local base

	if [ ! -f $makefile ];then
		echo ">>> $makefile不存在！！";
		return 1
	fi

	# get the base rom type of project
	# if you doesn't config BOARD_BASE_DEVICE_PROP_NAME in project's makefile, just ignore this project
	# if you config more than one BOARD_BASE_DEVICE_PROP_NAME in project's makefile, exit with error
	result_line_count=`grep "^[ ]*$prop" $makefile -w | wc | awk '{print $1}'`
	if [ $result_line_count = "0" ];then
		echo ">>> $makefile's $prop未配置！！";
		return 1
	elif [ $result_line_count != "1" ];then
		echo ">>> $makefile的$prop定义错误！！";
		exit $ERR_MISSION_FAILED;
	else # $result_line_count == "1"
		base=`grep "^[ ]*$prop" $makefile -w \
			| awk -F= '{print $NF}' | sed 's/^ *//g;s/$ *//g'`

		if [ $? != "0" ] || [ "x$base" = "x" ];then
			echo ">>> 无法从$makefile得到base"
			echo ">>> 确认\"$prop\"在$makefile是正确的"
			return 1;
		fi

		echo "$base"
		return 0
	fi
}

function getvendorSavedApps()
{
	appListFile=$(mktemp -t -u appList.XXXX)

	if [ $FROM_OTA == 0 ];then
		adb shell "if [ -f /data/local/tmp/app-list ]; then rm /data/local/tmp/app-list; fi"
		adb shell "ls /system/app/ > /data/local/tmp/app-list"
		adb shell "ls /system/priv-app/ >> /data/local/tmp/app-list"
		adb pull /data/local/tmp/app-list $appListFile > /dev/null 2>&1
	else
		ls $OUT_SYSTEM/app/ > $appListFile
		ls $OUT_SYSTEM/priv-app/ >> $appListFile
	fi

	vendor_saved_apps_configed=$(getConfigValueFromMakefile $NEW_MAKEFILE "vendor_saved_apps")

	if [ $? == "0" ] && [ "x$vendor_saved_apps_configed" != "x" ];then
		vendor_saved_apps_configed=$(echo $vendor_saved_apps_configed \
			| sed 's/^[ \t]*//g' \
			| sed 's/[ \t]*$//g' \
			| sed 's/[ \t][ \t]*/ /g' \
			| sed 's/ /\|/g')

		vendor_saved_apps_suggest=$VENDOR_SAVED_APPS_SUGGEST
		if [ "x$vendor_saved_apps_configed" != "x" ];then
			vendor_saved_apps_suggest="$vendor_saved_apps_suggest|$vendor_saved_apps_configed"
		fi;

		if [ -e $appListFile ]; then
			vendor_saved_apps=$(cat $appListFile \
				| egrep $vendor_saved_apps_suggest \
				| sed ":a;N;s/\n/ /g;ba")
			rm $appListFile
		else
			return 1
		fi
	fi
}

function getSystemType()
{
	if [ $FROM_OTA == 0 ];then
		if [ x"$(adb shell getprop ro.build.ab_update)" = x"true" ]; then
			echo ">>> 是A/B系统设备"
			is_ab_update="true"
		fi
	fi
}

function setupMakefile()
{
	echo ">>> 设置Makefile开始！"

	cp $TEMPLATE_MAKEFILE $NEW_MAKEFILE

	getVendorModifyJars
	if [ $? == "0" ] && [ "x$vendor_modify_jars" != "x" ]; then
		echo ">>> Set vendor_modify_jars: $vendor_modify_jars"
		sed -i "s/^[ \t]*vendor_modify_jars[ \t]*\:.*/vendor_modify_jars \:\= $vendor_modify_jars/g" $NEW_MAKEFILE
	else
		echo ">>> 得到在/system/framework的文件列表失败！"
		echo ">>> 请检查adb正确！"
		exit $ERR_MISSION_FAILED
	fi

	getDensity
	if [ "x$DENSITY" != "x" ]; then
		echo ">>> 设置像素密度：$DENSITY"
		sed -i "s/^[ \t]*DENSITY[ \t]*\:.*/DENSITY \:\= $DENSITY/g" $NEW_MAKEFILE
	fi

	getResolution
	if [ "x$RESOLUTION" != "x" ];then
		echo ">>> 设置分辨率：$RESOLUTION"
		sed -i "s/^[ \t]*RESOLUTION[ \t]*\:.*/RESOLUTION \:\= $RESOLUTION/g" $NEW_MAKEFILE
	fi

	getvendorSavedApps
	if [ "x$vendor_saved_apps" != "x" ]; then
		echo ">>> 设置vendor_saved_apps：$vendor_saved_apps"
		sed -i "s/^[ \t]*vendor_saved_apps[ \t]*\:.*/vendor_saved_apps \:\= $vendor_saved_apps/g" $NEW_MAKEFILE
	fi

	getSystemType
	if [ "x$is_ab_update" != "x" ]; then
		echo ">>> 设置PRODUCE_IS_AB_UPDATE：$is_ab_update"
		sed -i "s/^[ \t]*#PRODUCE_IS_AB_UPDATE[ \t]*\:.*/PRODUCE_IS_AB_UPDATE \:\= $is_ab_update/g" $NEW_MAKEFILE
	fi

	echo "===================================================="
	echo "Makefile配置："
	echo "    vendor_modify_jars   := $vendor_modify_jars"
	echo "    vendor_saved_apps    := $vendor_saved_apps"
	echo "    像素密度               := $DENSITY"
	echo "    分辨率                := $RESOLUTION"
	echo "    PRODUCE_IS_AB_UPDATE := $is_ab_update"
	echo "===================================================="

	echo ">>> 设置Makefile完成！"
}

############ init gitignore ###########
function initGitIgnore()
{
    if [ -f $GIT_IGNORE_CONFIG ] && [ ! -f $PRJ_GIT_IGNORE ]; then
        cp $GIT_IGNORE_CONFIG $PRJ_GIT_IGNORE
    fi
}

############ pull boot and recovery ###########
function prepare_boot_recovery()
{
	if [ ! -f $WORK_DIR/recovery.img ] && [ ! -f $WORK_DIR/recovery.fstab ]; then
		pullTmp=`mktemp -d`
		echo "Pull boot and recovery, It may take a few minutes, please wait...."
		$PULL_BOOT_RECOVERY $pullTmp > /dev/null 2>&1
		if [ -f $pullTmp/recovery.img ]; then
			mv $pullTmp/recovery.img $WORK_DIR/recovery.img
		fi
		if [ -f $pullTmp/boot.img ] && [ ! -f $WORK_DIR/boot.img ] ; then
			mv $pullTmp/boot.img $WORK_DIR/boot.img
		fi
		rm -rf $pullTmp
	fi
}

############  make new project ###############

# start a new project
function newMakefile()
{
	checkRootState
	setupMakefile
	#prepare_boot_recovery
	initGitIgnore
}

function newMakefileFromOTA()
{
	checkOTAPackage
	setupMakefile
	initGitIgnore
}

checkEnvironment
if [ $FROM_OTA == 0 ];then
	newMakefile
else
	newMakefileFromOTA
fi
